/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/assembler/AssembleError.js":
/*!****************************************!*\
  !*** ./lib/assembler/AssembleError.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AssembleError\": () => (/* binding */ AssembleError)\n/* harmony export */ });\nclass AssembleError extends Error {\n    constructor(tokens, e) {\n        super(e.message);\n        this.tokens = tokens;\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/AssembleError.js?");

/***/ }),

/***/ "./lib/assembler/assembler.js":
/*!************************************!*\
  !*** ./lib/assembler/assembler.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"display\": () => (/* binding */ display),\n/* harmony export */   \"assemble\": () => (/* binding */ assemble)\n/* harmony export */ });\n/* harmony import */ var _casl2_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./casl2/parser */ \"./lib/assembler/casl2/parser.js\");\n\nfunction display(result) {\n    return result.map(row => {\n        let v = \"\";\n        if (row.bytecode != null) {\n            const view = new DataView(row.bytecode);\n            if (row.bytecode.byteLength >= 2) {\n                v = view.getUint8(0).toString(16).padStart(2, \"0\");\n                v = v + view.getUint8(1).toString(16).padStart(2, \"0\");\n            }\n            if (row.bytecode.byteLength >= 4) {\n                v = v + \" \";\n                v = v + view.getUint16(2).toString(16).padStart(4, \"0\");\n            }\n        }\n        return `${row.memAddress}\t${v}\t${row.tokens.label || \"\t\"}\t${row.tokens.operator}\t${row.tokens.operand}`;\n    }).join(\"\\n\");\n}\nfunction assemble(startAddress, text, labels, memory) {\n    if (text == null || text.length == 0) {\n        // NOP\n        return [];\n    }\n    const result = (0,_casl2_parser__WEBPACK_IMPORTED_MODULE_0__.aggregateByLabel)(text, startAddress, (newLabel) => {\n        labels.set(newLabel.label, newLabel);\n    });\n    if (result instanceof Error) {\n        throw result;\n    }\n    const assembleResult = [];\n    result.forEach((aggregated) => {\n        const [label, insts] = aggregated;\n        let memAddress = label.memAddress;\n        insts.forEach(inst => {\n            const generated = inst.gen(labels);\n            if (generated == null) {\n                assembleResult.push({ memAddress, bytecode: null, tokens: inst.tokens });\n            }\n            else {\n                const { bytecode } = generated;\n                memory.storeBytecode(bytecode, memAddress);\n                assembleResult.push({ memAddress, bytecode, tokens: inst.tokens });\n                memAddress = memAddress + inst.wordLength;\n            }\n        });\n    });\n    return assembleResult;\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/assembler.js?");

/***/ }),

/***/ "./lib/assembler/casl2/parser.js":
/*!***************************************!*\
  !*** ./lib/assembler/casl2/parser.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"aggregateByLabel\": () => (/* binding */ aggregateByLabel)\n/* harmony export */ });\n/* harmony import */ var _tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tokenizer */ \"./lib/assembler/casl2/tokenizer.js\");\n/* harmony import */ var _procedureFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./procedureFactory */ \"./lib/assembler/casl2/procedureFactory.js\");\n/* harmony import */ var _AssembleError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../AssembleError */ \"./lib/assembler/AssembleError.js\");\n\n\n\nconst r = /^\\s*;.*$/;\nfunction aggregateByLabel(text, startAddress, labelUpdateAction) {\n    let currentAddress = startAddress;\n    const result = new Map();\n    const lines = text.split(\"\\n\");\n    let currentLabel = null;\n    let currentInstructions = [];\n    let instructionNum = 0;\n    for (let lineNum = 0; lineNum < lines.length; lineNum++) {\n        const line = lines[lineNum];\n        if (r.test(line)) {\n            // Comment Line\n            continue;\n        }\n        // line -> tokens\n        const tokenized = (0,_tokenizer__WEBPACK_IMPORTED_MODULE_0__.tokenize)(line, lineNum, instructionNum);\n        if (tokenized instanceof Error) {\n            return tokenized;\n        }\n        instructionNum++;\n        // update LABEL\n        const newLabel = tokenized.label;\n        if (newLabel != \"\") {\n            if (currentLabel != null) {\n                result.set(currentLabel.label, [currentLabel, currentInstructions]);\n            }\n            if (result.has(newLabel)) {\n                return new Error(`duplicated label: ${newLabel}`);\n            }\n            currentLabel = { label: newLabel, memAddress: currentAddress };\n            labelUpdateAction(currentLabel);\n            currentInstructions = [];\n        }\n        // tokens -> inst\n        tokenized.operand = trimComment(tokenized.operand);\n        const inst = createInstruction(tokenized);\n        currentInstructions.push(inst);\n        // advance address\n        currentAddress = currentAddress + inst.wordLength;\n    }\n    if (currentLabel != null) {\n        result.set(currentLabel.label, [currentLabel, currentInstructions]);\n    }\n    return result;\n}\nfunction createInstruction(tokens) {\n    try {\n        const inst = (0,_procedureFactory__WEBPACK_IMPORTED_MODULE_1__.makeProcedure)(tokens);\n        return inst;\n    }\n    catch (e) {\n        if (e instanceof Error) {\n            throw new _AssembleError__WEBPACK_IMPORTED_MODULE_2__.AssembleError(tokens, e);\n        }\n        else {\n            throw e;\n        }\n    }\n}\nfunction trimComment(operand) {\n    const commentStartIdx = operand.search(\" \");\n    if (commentStartIdx >= 0) {\n        return operand.substring(0, commentStartIdx);\n    }\n    return operand;\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/parser.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedureFactory.js":
/*!*************************************************!*\
  !*** ./lib/assembler/casl2/procedureFactory.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeProcedure\": () => (/* binding */ makeProcedure)\n/* harmony export */ });\n/* harmony import */ var _procedures_execDC__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./procedures/execDC */ \"./lib/assembler/casl2/procedures/execDC.js\");\n/* harmony import */ var _procedures_makeLD__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./procedures/makeLD */ \"./lib/assembler/casl2/procedures/makeLD.js\");\n/* harmony import */ var _procedures_makeLAD__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./procedures/makeLAD */ \"./lib/assembler/casl2/procedures/makeLAD.js\");\n/* harmony import */ var _procedures_makeADDA__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./procedures/makeADDA */ \"./lib/assembler/casl2/procedures/makeADDA.js\");\n/* harmony import */ var _procedures_execDS__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./procedures/execDS */ \"./lib/assembler/casl2/procedures/execDS.js\");\n/* harmony import */ var _procedures_execSTART__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./procedures/execSTART */ \"./lib/assembler/casl2/procedures/execSTART.js\");\n/* harmony import */ var _procedures_execEND__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./procedures/execEND */ \"./lib/assembler/casl2/procedures/execEND.js\");\n/* harmony import */ var _procedures_makeRET__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./procedures/makeRET */ \"./lib/assembler/casl2/procedures/makeRET.js\");\n/* harmony import */ var _procedures_makeSUBA__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./procedures/makeSUBA */ \"./lib/assembler/casl2/procedures/makeSUBA.js\");\n/* harmony import */ var _procedures_makeJUMP__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./procedures/makeJUMP */ \"./lib/assembler/casl2/procedures/makeJUMP.js\");\n/* harmony import */ var _procedures_makeJPL__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./procedures/makeJPL */ \"./lib/assembler/casl2/procedures/makeJPL.js\");\n/* harmony import */ var _procedures_makeJMI__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./procedures/makeJMI */ \"./lib/assembler/casl2/procedures/makeJMI.js\");\n/* harmony import */ var _procedures_makeJZE__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./procedures/makeJZE */ \"./lib/assembler/casl2/procedures/makeJZE.js\");\n/* harmony import */ var _procedures_makeJNZ__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./procedures/makeJNZ */ \"./lib/assembler/casl2/procedures/makeJNZ.js\");\n/* harmony import */ var _procedures_makeJOV__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./procedures/makeJOV */ \"./lib/assembler/casl2/procedures/makeJOV.js\");\n/* harmony import */ var _procedures_makeADDL__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./procedures/makeADDL */ \"./lib/assembler/casl2/procedures/makeADDL.js\");\n/* harmony import */ var _procedures_makeSUBL__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./procedures/makeSUBL */ \"./lib/assembler/casl2/procedures/makeSUBL.js\");\n/* harmony import */ var _procedures_makeCPA__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./procedures/makeCPA */ \"./lib/assembler/casl2/procedures/makeCPA.js\");\n/* harmony import */ var _procedures_makeCPL__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./procedures/makeCPL */ \"./lib/assembler/casl2/procedures/makeCPL.js\");\n/* harmony import */ var _procedures_makePUSH__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./procedures/makePUSH */ \"./lib/assembler/casl2/procedures/makePUSH.js\");\n/* harmony import */ var _procedures_makePOP__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./procedures/makePOP */ \"./lib/assembler/casl2/procedures/makePOP.js\");\n/* harmony import */ var _procedures_makeST__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./procedures/makeST */ \"./lib/assembler/casl2/procedures/makeST.js\");\n/* harmony import */ var _procedures_makeOR__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./procedures/makeOR */ \"./lib/assembler/casl2/procedures/makeOR.js\");\n/* harmony import */ var _procedures_makeAND__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./procedures/makeAND */ \"./lib/assembler/casl2/procedures/makeAND.js\");\n/* harmony import */ var _procedures_makeXOR__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./procedures/makeXOR */ \"./lib/assembler/casl2/procedures/makeXOR.js\");\n/* harmony import */ var _procedures_makeSLA__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./procedures/makeSLA */ \"./lib/assembler/casl2/procedures/makeSLA.js\");\n/* harmony import */ var _procedures_makeSRA__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./procedures/makeSRA */ \"./lib/assembler/casl2/procedures/makeSRA.js\");\n/* harmony import */ var _procedures_makeSLL__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./procedures/makeSLL */ \"./lib/assembler/casl2/procedures/makeSLL.js\");\n/* harmony import */ var _procedures_makeSRL__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./procedures/makeSRL */ \"./lib/assembler/casl2/procedures/makeSRL.js\");\n/* harmony import */ var _procedures_makeCALL__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./procedures/makeCALL */ \"./lib/assembler/casl2/procedures/makeCALL.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction makeProcedure(tokens) {\n    switch (tokens.operator) {\n        case \"START\":\n            return (0,_procedures_execSTART__WEBPACK_IMPORTED_MODULE_5__.execSTART)(tokens);\n        case \"END\":\n            return (0,_procedures_execEND__WEBPACK_IMPORTED_MODULE_6__.execEND)(tokens);\n        case \"DC\":\n            return (0,_procedures_execDC__WEBPACK_IMPORTED_MODULE_0__.execDC)(tokens);\n        case \"DS\":\n            return (0,_procedures_execDS__WEBPACK_IMPORTED_MODULE_4__.execDS)(tokens);\n        case \"LD\":\n            return (0,_procedures_makeLD__WEBPACK_IMPORTED_MODULE_1__.makeLD)(tokens);\n        case \"ST\":\n            return (0,_procedures_makeST__WEBPACK_IMPORTED_MODULE_21__.makeST)(tokens);\n        case \"LAD\":\n            return (0,_procedures_makeLAD__WEBPACK_IMPORTED_MODULE_2__.makeLAD)(tokens);\n        case \"ADDA\":\n            return (0,_procedures_makeADDA__WEBPACK_IMPORTED_MODULE_3__.makeADDA)(tokens);\n        case \"SUBA\":\n            return (0,_procedures_makeSUBA__WEBPACK_IMPORTED_MODULE_8__.makeSUBA)(tokens);\n        case \"ADDL\":\n            return (0,_procedures_makeADDL__WEBPACK_IMPORTED_MODULE_15__.makeADDL)(tokens);\n        case \"SUBL\":\n            return (0,_procedures_makeSUBL__WEBPACK_IMPORTED_MODULE_16__.makeSUBL)(tokens);\n        case \"CPA\":\n            return (0,_procedures_makeCPA__WEBPACK_IMPORTED_MODULE_17__.makeCPA)(tokens);\n        case \"CPL\":\n            return (0,_procedures_makeCPL__WEBPACK_IMPORTED_MODULE_18__.makeCPL)(tokens);\n        case \"JUMP\":\n            return (0,_procedures_makeJUMP__WEBPACK_IMPORTED_MODULE_9__.makeJUMP)(tokens);\n        case \"JPL\":\n            return (0,_procedures_makeJPL__WEBPACK_IMPORTED_MODULE_10__.makeJPL)(tokens);\n        case \"JMI\":\n            return (0,_procedures_makeJMI__WEBPACK_IMPORTED_MODULE_11__.makeJMI)(tokens);\n        case \"JZE\":\n            return (0,_procedures_makeJZE__WEBPACK_IMPORTED_MODULE_12__.makeJZE)(tokens);\n        case \"JNZ\":\n            return (0,_procedures_makeJNZ__WEBPACK_IMPORTED_MODULE_13__.makeJNZ)(tokens);\n        case \"JOV\":\n            return (0,_procedures_makeJOV__WEBPACK_IMPORTED_MODULE_14__.makeJOV)(tokens);\n        case \"OR\":\n            return (0,_procedures_makeOR__WEBPACK_IMPORTED_MODULE_22__.makeOR)(tokens);\n        case \"AND\":\n            return (0,_procedures_makeAND__WEBPACK_IMPORTED_MODULE_23__.makeAND)(tokens);\n        case \"XOR\":\n            return (0,_procedures_makeXOR__WEBPACK_IMPORTED_MODULE_24__.makeXOR)(tokens);\n        case \"SLL\":\n            return (0,_procedures_makeSLL__WEBPACK_IMPORTED_MODULE_27__.makeSLL)(tokens);\n        case \"SRL\":\n            return (0,_procedures_makeSRL__WEBPACK_IMPORTED_MODULE_28__.makeSRL)(tokens);\n        case \"SLA\":\n            return (0,_procedures_makeSLA__WEBPACK_IMPORTED_MODULE_25__.makeSLA)(tokens);\n        case \"SRA\":\n            return (0,_procedures_makeSRA__WEBPACK_IMPORTED_MODULE_26__.makeSRA)(tokens);\n        case \"PUSH\":\n            return (0,_procedures_makePUSH__WEBPACK_IMPORTED_MODULE_19__.makePUSH)(tokens);\n        case \"POP\":\n            return (0,_procedures_makePOP__WEBPACK_IMPORTED_MODULE_20__.makePOP)(tokens);\n        case \"CALL\":\n            return (0,_procedures_makeCALL__WEBPACK_IMPORTED_MODULE_29__.makeCALL)(tokens);\n        case \"RET\":\n            return (0,_procedures_makeRET__WEBPACK_IMPORTED_MODULE_7__.makeRET)(tokens);\n        default:\n            throw Error(`${tokens.operator} is unknown`);\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedureFactory.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/execDC.js":
/*!**************************************************!*\
  !*** ./lib/assembler/casl2/procedures/execDC.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"execDC\": () => (/* binding */ execDC)\n/* harmony export */ });\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\nfunction execDC(tokens) {\n    const operand = tokens.operand;\n    let values = [];\n    if (operand.startsWith(\"'\")) {\n        if (!operand.endsWith(\"'\")) {\n            throw new Error(`operand starts with \"'\", but not ends with \"'\": ${tokens.operand}`);\n        }\n        const s = operand.substring(1, operand.length - 1);\n        if (!(0,_strings__WEBPACK_IMPORTED_MODULE_0__.isJisX0201)(s)) {\n            throw new Error(`operand is string, then should be character set of JIS X 0201: ${tokens.operand}`);\n        }\n        values = s.split(\"\").map(c => c.charCodeAt(0));\n    }\n    else {\n        values = operand.split(\",\").map(v => {\n            let intVal = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_0__.isNumeric)(v)) {\n                intVal = Number(v);\n            }\n            else if ((0,_strings__WEBPACK_IMPORTED_MODULE_0__.isHexadecimal)(v)) {\n                intVal = parseInt(v.replace(\"#\", \"\"), 16);\n            }\n            else {\n                throw new Error(`operand should be positive number: ${tokens.operand}`);\n            }\n            if (intVal < -32768) {\n                throw new Error(`operand should be greater than -32769: ${tokens.operand}`);\n            }\n            else if (intVal > 65535) {\n                throw new Error(`operand should be less than 65536: ${tokens.operand}`);\n            }\n            return intVal;\n        });\n    }\n    const wordLength = values.length;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            // load constant value in memory\n            const bytecode = new ArrayBuffer(2 * values.length);\n            const view = new DataView(bytecode);\n            values.forEach((v, index) => {\n                view.setInt16(index * 2, v);\n            });\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/execDC.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/execDS.js":
/*!**************************************************!*\
  !*** ./lib/assembler/casl2/procedures/execDS.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"execDS\": () => (/* binding */ execDS)\n/* harmony export */ });\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\nfunction execDS(tokens) {\n    const operand = tokens.operand;\n    if (!(0,_strings__WEBPACK_IMPORTED_MODULE_0__.isDigits)(operand)) {\n        throw new Error(`operand should be positive number: ${tokens}`);\n    }\n    const reservedSpace = Number(operand);\n    const wordLength = reservedSpace;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            const bf = new ArrayBuffer(2 * wordLength);\n            const view = new Uint16Array(bf);\n            view.fill(0x7FFF);\n            return { bytecode: bf };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/execDS.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/execEND.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/execEND.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"execEND\": () => (/* binding */ execEND)\n/* harmony export */ });\nfunction execEND(tokens) {\n    return {\n        wordLength: 0,\n        tokens,\n        gen: () => null\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/execEND.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/execSTART.js":
/*!*****************************************************!*\
  !*** ./lib/assembler/casl2/procedures/execSTART.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"execSTART\": () => (/* binding */ execSTART)\n/* harmony export */ });\nfunction execSTART(tokens) {\n    return {\n        wordLength: 0,\n        tokens,\n        gen: () => null\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/execSTART.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/labelAccessor.js":
/*!*********************************************************!*\
  !*** ./lib/assembler/casl2/procedures/labelAccessor.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getLabelOrThrow\": () => (/* binding */ getLabelOrThrow)\n/* harmony export */ });\nfunction getLabelOrThrow(text, labels) {\n    const label = labels.get(text);\n    if (label == null) {\n        throw new Error(`not found label: ${text}`);\n    }\n    return label;\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/labelAccessor.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeADDA.js":
/*!****************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeADDA.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeADDA\": () => (/* binding */ makeADDA)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeADDA(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    if ((0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.isGeneralRegister)(target)) {\n        // GR1+GR2 -> GR1\n        const opCode = 0x24;\n        const wordLength = 1;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. ADDA GR1,GR2\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const operand2GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n                const bytecode = new ArrayBuffer(2);\n                const byteArray = new Uint8Array(bytecode, 0, 2);\n                byteArray[0] = opCode;\n                byteArray[1] = (operand1GR << 4) + operand2GR;\n                return { bytecode };\n            }\n        };\n    }\n    else {\n        // GR1+10 -> GR1\n        const opCode = 0x20;\n        const wordLength = 2;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. ADDA GR1,adr\n                const grx = ts.length > 2 ? ts[2] : null;\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n                let operandAddress = 0;\n                if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                    operandAddress = Number(target);\n                }\n                else {\n                    operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n                }\n                const bytecode = new ArrayBuffer(4);\n                const view = new DataView(bytecode);\n                view.setUint8(0, opCode);\n                view.setUint8(1, (operand1GR << 4) + indexGR);\n                view.setUint16(2, operandAddress, false);\n                return { bytecode };\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeADDA.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeADDL.js":
/*!****************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeADDL.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeADDL\": () => (/* binding */ makeADDL)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeADDL(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    if ((0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.isGeneralRegister)(target)) {\n        // GR1+GR2 -> GR1\n        const opCode = 0x26;\n        const wordLength = 1;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. ADDL GR1,GR2\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const operand2GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n                const bytecode = new ArrayBuffer(2);\n                const byteArray = new Uint8Array(bytecode, 0, 2);\n                byteArray[0] = opCode;\n                byteArray[1] = (operand1GR << 4) + operand2GR;\n                return { bytecode };\n            }\n        };\n    }\n    else {\n        // GR1+10 -> GR1\n        const opCode = 0x22;\n        const wordLength = 2;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. ADD GR1,adr\n                const grx = ts.length > 2 ? ts[2] : null;\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n                let operandAddress = 0;\n                if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                    operandAddress = Number(target);\n                }\n                else {\n                    operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n                }\n                const bytecode = new ArrayBuffer(4);\n                const view = new DataView(bytecode);\n                view.setUint8(0, opCode);\n                view.setUint8(1, (operand1GR << 4) + indexGR);\n                view.setUint16(2, operandAddress, false);\n                return { bytecode };\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeADDL.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeAND.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeAND.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeAND\": () => (/* binding */ makeAND)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeAND(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    if ((0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.isGeneralRegister)(target)) {\n        // GR1 AND GR2 -> GR1\n        const opCode = 0x34;\n        const wordLength = 1;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. AND GR1,GR2\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const operand2GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n                const bytecode = new ArrayBuffer(2);\n                const byteArray = new Uint8Array(bytecode, 0, 2);\n                byteArray[0] = opCode;\n                byteArray[1] = (operand1GR << 4) + operand2GR;\n                return { bytecode };\n            }\n        };\n    }\n    else {\n        // GR1 AND 10 -> GR1\n        const opCode = 0x30;\n        const wordLength = 2;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. AND GR1,adr\n                const grx = ts.length > 2 ? ts[2] : null;\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n                let operandAddress = 0;\n                if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                    operandAddress = Number(target);\n                }\n                else {\n                    operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n                }\n                const bytecode = new ArrayBuffer(4);\n                const view = new DataView(bytecode);\n                view.setUint8(0, opCode);\n                view.setUint8(1, (operand1GR << 4) + indexGR);\n                view.setUint16(2, operandAddress, false);\n                return { bytecode };\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeAND.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeCALL.js":
/*!****************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeCALL.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeCALL\": () => (/* binding */ makeCALL)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeCALL(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const value = ts[0];\n    const opCode = 0x80;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            const grx = ts.length > 1 ? ts[1] : null;\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isAddress)(value)) {\n                operandAddress = (0,_strings__WEBPACK_IMPORTED_MODULE_2__.normalizeAddress)(value);\n            }\n            else {\n                const label = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(value, labels);\n                operandAddress = label.memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (0 << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeCALL.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeCPA.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeCPA.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeCPA\": () => (/* binding */ makeCPA)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeCPA(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    if ((0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.isGeneralRegister)(target)) {\n        // GR1 > GR2 -> FR\n        const opCode = 0x44;\n        const wordLength = 1;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const operand2GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n                const bytecode = new ArrayBuffer(2);\n                const byteArray = new Uint8Array(bytecode, 0, 2);\n                byteArray[0] = opCode;\n                byteArray[1] = (operand1GR << 4) + operand2GR;\n                return { bytecode };\n            }\n        };\n    }\n    else {\n        // GR1 > memory(10) -> FR\n        const opCode = 0x40;\n        const wordLength = 2;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                const grx = ts.length > 2 ? ts[2] : null;\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n                let operandAddress = 0;\n                if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                    operandAddress = Number(target);\n                }\n                else {\n                    operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n                }\n                const bytecode = new ArrayBuffer(4);\n                const view = new DataView(bytecode);\n                view.setUint8(0, opCode);\n                view.setUint8(1, (operand1GR << 4) + indexGR);\n                view.setUint16(2, operandAddress, false);\n                return { bytecode };\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeCPA.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeCPL.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeCPL.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeCPL\": () => (/* binding */ makeCPL)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeCPL(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    if ((0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.isGeneralRegister)(target)) {\n        // GR1 > GR2 -> FR\n        const opCode = 0x45;\n        const wordLength = 1;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const operand2GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n                const bytecode = new ArrayBuffer(2);\n                const byteArray = new Uint8Array(bytecode, 0, 2);\n                byteArray[0] = opCode;\n                byteArray[1] = (operand1GR << 4) + operand2GR;\n                return { bytecode };\n            }\n        };\n    }\n    else {\n        // GR1 > 10 -> FR\n        const opCode = 0x41;\n        const wordLength = 2;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                const grx = ts.length > 2 ? ts[2] : null;\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n                let operandAddress = 0;\n                if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                    operandAddress = Number(target);\n                }\n                else {\n                    operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n                }\n                const bytecode = new ArrayBuffer(4);\n                const view = new DataView(bytecode);\n                view.setUint8(0, opCode);\n                view.setUint8(1, (operand1GR << 4) + indexGR);\n                view.setUint16(2, operandAddress, false);\n                return { bytecode };\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeCPL.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeJMI.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeJMI.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeJMI\": () => (/* binding */ makeJMI)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeJMI(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand = ts[0];\n    const opCode = 0x61;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            const grx = ts.length > 1 ? ts[1] : null;\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isAddress)(operand)) {\n                operandAddress = (0,_strings__WEBPACK_IMPORTED_MODULE_2__.normalizeAddress)(operand);\n            }\n            else {\n                const label = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(operand, labels);\n                operandAddress = label.memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (0 << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeJMI.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeJNZ.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeJNZ.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeJNZ\": () => (/* binding */ makeJNZ)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeJNZ(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand = ts[0];\n    const opCode = 0x62;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            const grx = ts.length > 1 ? ts[1] : null;\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isAddress)(operand)) {\n                operandAddress = (0,_strings__WEBPACK_IMPORTED_MODULE_2__.normalizeAddress)(operand);\n            }\n            else {\n                const label = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(operand, labels);\n                operandAddress = label.memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (0 << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeJNZ.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeJOV.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeJOV.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeJOV\": () => (/* binding */ makeJOV)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeJOV(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand = ts[0];\n    const opCode = 0x66;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            const grx = ts.length > 1 ? ts[1] : null;\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isAddress)(operand)) {\n                operandAddress = (0,_strings__WEBPACK_IMPORTED_MODULE_2__.normalizeAddress)(operand);\n            }\n            else {\n                const label = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(operand, labels);\n                operandAddress = label.memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (0 << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeJOV.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeJPL.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeJPL.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeJPL\": () => (/* binding */ makeJPL)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeJPL(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand = ts[0];\n    const opCode = 0x65;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            const grx = ts.length > 1 ? ts[1] : null;\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isAddress)(operand)) {\n                operandAddress = (0,_strings__WEBPACK_IMPORTED_MODULE_2__.normalizeAddress)(operand);\n            }\n            else {\n                const label = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(operand, labels);\n                operandAddress = label.memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (0 << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeJPL.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeJUMP.js":
/*!****************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeJUMP.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeJUMP\": () => (/* binding */ makeJUMP)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeJUMP(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand = ts[0];\n    const opCode = 0x64;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            // e.g. JUMP adr,GR2 => [0x6402, address]\n            const grx = ts.length > 1 ? ts[1] : null;\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isAddress)(operand)) {\n                operandAddress = (0,_strings__WEBPACK_IMPORTED_MODULE_2__.normalizeAddress)(operand);\n            }\n            else {\n                const label = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(operand, labels);\n                operandAddress = label.memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (0 << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeJUMP.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeJZE.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeJZE.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeJZE\": () => (/* binding */ makeJZE)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeJZE(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand = ts[0];\n    const opCode = 0x63;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            const grx = ts.length > 1 ? ts[1] : null;\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isAddress)(operand)) {\n                operandAddress = (0,_strings__WEBPACK_IMPORTED_MODULE_2__.normalizeAddress)(operand);\n            }\n            else {\n                const label = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(operand, labels);\n                operandAddress = label.memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (0 << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeJZE.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeLAD.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeLAD.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeLAD\": () => (/* binding */ makeLAD)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeLAD(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const target = ts[0];\n    const value = ts[1];\n    const opCode = 0x12;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            // e.g. LAD GR1,adr => [0x1210, address]\n            const distGR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n            const grx = ts.length > 2 ? ts[2] : null;\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(value)) {\n                operandAddress = Number(value);\n            }\n            else if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isHexadecimal)(value)) {\n                operandAddress = Number(parseInt(value.replace(\"#\", \"\"), 16));\n            }\n            else {\n                const label = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(value, labels);\n                operandAddress = label.memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (distGR << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeLAD.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeLD.js":
/*!**************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeLD.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeLD\": () => (/* binding */ makeLD)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeLD(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const target = ts[0];\n    const value = ts[1];\n    if ((0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.isGeneralRegister)(value)) {\n        // GR -> GR\n        const opCode = 0x14;\n        const wordLength = 1;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. LD GR1,GR2 => [0x1412]\n                const distGR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n                const grx = ts.length > 2 ? ts[2] : null;\n                const srcGR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(value);\n                if (grx != null) {\n                    throw new Error(`cannot use GRx: ${tokens}`);\n                }\n                const bytecode = new ArrayBuffer(2);\n                const byteArray = new Uint8Array(bytecode, 0, 2);\n                byteArray[0] = opCode;\n                byteArray[1] = (distGR << 4) + srcGR;\n                return { bytecode };\n            }\n        };\n    }\n    else {\n        // memory -> GR\n        const opCode = 0x10;\n        const wordLength = 2;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. LD GR1,adr => [0x1010, address]\n                const distGR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n                const grx = ts.length > 2 ? ts[2] : null;\n                const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n                let operandAddress = 0;\n                if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isAddress)(value)) {\n                    operandAddress = (0,_strings__WEBPACK_IMPORTED_MODULE_2__.normalizeAddress)(value);\n                }\n                else {\n                    const label = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(value, labels);\n                    operandAddress = label.memAddress;\n                }\n                const bytecode = new ArrayBuffer(4);\n                const view = new DataView(bytecode);\n                view.setUint8(0, opCode);\n                view.setUint8(1, (distGR << 4) + indexGR);\n                view.setUint16(2, operandAddress, false);\n                return { bytecode };\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeLD.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeOR.js":
/*!**************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeOR.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeOR\": () => (/* binding */ makeOR)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeOR(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    if ((0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.isGeneralRegister)(target)) {\n        // GR1 OR GR2 -> GR1\n        const opCode = 0x35;\n        const wordLength = 1;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. OR GR1,GR2\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const operand2GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n                const bytecode = new ArrayBuffer(2);\n                const byteArray = new Uint8Array(bytecode, 0, 2);\n                byteArray[0] = opCode;\n                byteArray[1] = (operand1GR << 4) + operand2GR;\n                return { bytecode };\n            }\n        };\n    }\n    else {\n        // GR1 OR 10 -> GR1\n        const opCode = 0x31;\n        const wordLength = 2;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. OR GR1,adr\n                const grx = ts.length > 2 ? ts[2] : null;\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n                let operandAddress = 0;\n                if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                    operandAddress = Number(target);\n                }\n                else {\n                    operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n                }\n                const bytecode = new ArrayBuffer(4);\n                const view = new DataView(bytecode);\n                view.setUint8(0, opCode);\n                view.setUint8(1, (operand1GR << 4) + indexGR);\n                view.setUint16(2, operandAddress, false);\n                return { bytecode };\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeOR.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makePOP.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makePOP.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makePOP\": () => (/* binding */ makePOP)\n/* harmony export */ });\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n\nfunction makePOP(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand = ts[0];\n    const opCode = 0x71;\n    const wordLength = 1;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            const targetGR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_0__.getGrByteCodeOrThrow)(operand);\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (targetGR << 4) + 0);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makePOP.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makePUSH.js":
/*!****************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makePUSH.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makePUSH\": () => (/* binding */ makePUSH)\n/* harmony export */ });\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\nfunction makePUSH(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const value = ts[0];\n    const opCode = 0x70;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            if (!(0,_strings__WEBPACK_IMPORTED_MODULE_1__.isAddress)(value)) {\n                throw new Error(`operand should be address: ${tokens}`);\n            }\n            const operandAddress = (0,_strings__WEBPACK_IMPORTED_MODULE_1__.normalizeAddress)(value);\n            const grx = ts.length > 1 ? ts[1] : null;\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_0__.getGrByteCodeOrThrow)(grx);\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (0 << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makePUSH.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeRET.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeRET.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeRET\": () => (/* binding */ makeRET)\n/* harmony export */ });\nfunction makeRET(tokens) {\n    const opCode = 0x81;\n    return {\n        wordLength: 1,\n        tokens,\n        gen: (labels) => {\n            const bytecode = new ArrayBuffer(2);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, 0);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeRET.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeSLA.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeSLA.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeSLA\": () => (/* binding */ makeSLA)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeSLA(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    // GR1 << 2 -> GR1\n    const opCode = 0x50;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            // e.g. SLA GR1,adr\n            const grx = ts.length > 2 ? ts[2] : null;\n            const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                operandAddress = Number(target);\n            }\n            else {\n                operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (operand1GR << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeSLA.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeSLL.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeSLL.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeSLL\": () => (/* binding */ makeSLL)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeSLL(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    // GR1 << 2 -> GR1\n    const opCode = 0x52;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            // e.g. SLL GR1,adr\n            const grx = ts.length > 2 ? ts[2] : null;\n            const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                operandAddress = Number(target);\n            }\n            else {\n                operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (operand1GR << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeSLL.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeSRA.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeSRA.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeSRA\": () => (/* binding */ makeSRA)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeSRA(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    // GR1 >> 2 -> GR1\n    const opCode = 0x51;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            // e.g. SRA GR1,adr\n            const grx = ts.length > 2 ? ts[2] : null;\n            const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                operandAddress = Number(target);\n            }\n            else {\n                operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (operand1GR << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeSRA.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeSRL.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeSRL.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeSRL\": () => (/* binding */ makeSRL)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeSRL(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    // GR1 >>> 2 -> GR1\n    const opCode = 0x53;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            // e.g. SRL GR1,adr\n            const grx = ts.length > 2 ? ts[2] : null;\n            const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                operandAddress = Number(target);\n            }\n            else {\n                operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (operand1GR << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeSRL.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeST.js":
/*!**************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeST.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeST\": () => (/* binding */ makeST)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeST(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const src = ts[0];\n    const value = ts[1];\n    // GR -> memory\n    const opCode = 0x11;\n    const wordLength = 2;\n    return {\n        wordLength,\n        tokens,\n        gen: (labels) => {\n            // e.g. ST GR1,adr => [0x1110, address]\n            const srcGR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(src);\n            const grx = ts.length > 2 ? ts[2] : null;\n            const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n            let operandAddress = 0;\n            if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isAddress)(value)) {\n                operandAddress = (0,_strings__WEBPACK_IMPORTED_MODULE_2__.normalizeAddress)(value);\n            }\n            else {\n                const label = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(value, labels);\n                operandAddress = label.memAddress;\n            }\n            const bytecode = new ArrayBuffer(4);\n            const view = new DataView(bytecode);\n            view.setUint8(0, opCode);\n            view.setUint8(1, (srcGR << 4) + indexGR);\n            view.setUint16(2, operandAddress, false);\n            return { bytecode };\n        }\n    };\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeST.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeSUBA.js":
/*!****************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeSUBA.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeSUBA\": () => (/* binding */ makeSUBA)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeSUBA(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    if ((0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.isGeneralRegister)(target)) {\n        // GR1-GR2 -> GR1\n        const opCode = 0x25;\n        const wordLength = 1;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. SUBA GR1,GR2\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const operand2GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n                const bytecode = new ArrayBuffer(2);\n                const byteArray = new Uint8Array(bytecode, 0, 2);\n                byteArray[0] = opCode;\n                byteArray[1] = (operand1GR << 4) + operand2GR;\n                return { bytecode };\n            }\n        };\n    }\n    else {\n        // GR1-10 -> GR1\n        const opCode = 0x21;\n        const wordLength = 2;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. SUBA GR1,adr\n                const grx = ts.length > 2 ? ts[2] : null;\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n                let operandAddress = 0;\n                if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                    operandAddress = Number(target);\n                }\n                else {\n                    operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n                }\n                const bytecode = new ArrayBuffer(4);\n                const view = new DataView(bytecode);\n                view.setUint8(0, opCode);\n                view.setUint8(1, (operand1GR << 4) + indexGR);\n                view.setUint16(2, operandAddress, false);\n                return { bytecode };\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeSUBA.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeSUBL.js":
/*!****************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeSUBL.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeSUBL\": () => (/* binding */ makeSUBL)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeSUBL(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    if ((0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.isGeneralRegister)(target)) {\n        // GR1-GR2 -> GR1\n        const opCode = 0x27;\n        const wordLength = 1;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. SUBL GR1,GR2\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const operand2GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n                const bytecode = new ArrayBuffer(2);\n                const byteArray = new Uint8Array(bytecode, 0, 2);\n                byteArray[0] = opCode;\n                byteArray[1] = (operand1GR << 4) + operand2GR;\n                return { bytecode };\n            }\n        };\n    }\n    else {\n        // GR1-10 -> GR1\n        const opCode = 0x23;\n        const wordLength = 2;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. SUBL GR1,adr\n                const grx = ts.length > 2 ? ts[2] : null;\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n                let operandAddress = 0;\n                if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                    operandAddress = Number(target);\n                }\n                else {\n                    operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n                }\n                const bytecode = new ArrayBuffer(4);\n                const view = new DataView(bytecode);\n                view.setUint8(0, opCode);\n                view.setUint8(1, (operand1GR << 4) + indexGR);\n                view.setUint16(2, operandAddress, false);\n                return { bytecode };\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeSUBL.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/makeXOR.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/makeXOR.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeXOR\": () => (/* binding */ makeXOR)\n/* harmony export */ });\n/* harmony import */ var _labelAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelAccessor */ \"./lib/assembler/casl2/procedures/labelAccessor.js\");\n/* harmony import */ var _registerAccessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\n\n\nfunction makeXOR(tokens) {\n    const ts = tokens.operand.split(\",\");\n    const operand1 = ts[0];\n    const target = ts[1];\n    if ((0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.isGeneralRegister)(target)) {\n        // GR1 XOR GR2 -> GR1\n        const opCode = 0x36;\n        const wordLength = 1;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. XOR GR1,GR2\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const operand2GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(target);\n                const bytecode = new ArrayBuffer(2);\n                const byteArray = new Uint8Array(bytecode, 0, 2);\n                byteArray[0] = opCode;\n                byteArray[1] = (operand1GR << 4) + operand2GR;\n                return { bytecode };\n            }\n        };\n    }\n    else {\n        // GR1 XOR 10 -> GR1\n        const opCode = 0x32;\n        const wordLength = 2;\n        return {\n            wordLength,\n            tokens,\n            gen: (labels) => {\n                // e.g. XOR GR1,adr\n                const grx = ts.length > 2 ? ts[2] : null;\n                const operand1GR = (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(operand1);\n                const indexGR = grx == null ? 0 : (0,_registerAccessor__WEBPACK_IMPORTED_MODULE_1__.getGrByteCodeOrThrow)(grx);\n                let operandAddress = 0;\n                if ((0,_strings__WEBPACK_IMPORTED_MODULE_2__.isNumeric)(target)) {\n                    operandAddress = Number(target);\n                }\n                else {\n                    operandAddress = (0,_labelAccessor__WEBPACK_IMPORTED_MODULE_0__.getLabelOrThrow)(target, labels).memAddress;\n                }\n                const bytecode = new ArrayBuffer(4);\n                const view = new DataView(bytecode);\n                view.setUint8(0, opCode);\n                view.setUint8(1, (operand1GR << 4) + indexGR);\n                view.setUint16(2, operandAddress, false);\n                return { bytecode };\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/makeXOR.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/registerAccessor.js":
/*!************************************************************!*\
  !*** ./lib/assembler/casl2/procedures/registerAccessor.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isGeneralRegister\": () => (/* reexport safe */ _infra_register__WEBPACK_IMPORTED_MODULE_0__.isGeneralRegister),\n/* harmony export */   \"GeneralRegister\": () => (/* reexport safe */ _infra_register__WEBPACK_IMPORTED_MODULE_0__.GeneralRegister),\n/* harmony export */   \"FlagRegister\": () => (/* reexport safe */ _infra_register__WEBPACK_IMPORTED_MODULE_0__.FlagRegister),\n/* harmony export */   \"END_ADDRESS\": () => (/* reexport safe */ _infra_register__WEBPACK_IMPORTED_MODULE_0__.END_ADDRESS),\n/* harmony export */   \"getGrByteCodeOrThrow\": () => (/* binding */ getGrByteCodeOrThrow),\n/* harmony export */   \"advancePR\": () => (/* binding */ advancePR),\n/* harmony export */   \"setPR\": () => (/* binding */ setPR)\n/* harmony export */ });\n/* harmony import */ var _infra_register__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../infra/register */ \"./lib/infra/register.js\");\n\nfunction getGrByteCodeOrThrow(text) {\n    switch (text) {\n        case \"GR0\":\n            return 0;\n        case \"GR1\":\n            return 1;\n        case \"GR2\":\n            return 2;\n        case \"GR3\":\n            return 3;\n        case \"GR4\":\n            return 4;\n        case \"GR5\":\n            return 5;\n        case \"GR6\":\n            return 6;\n        case \"GR7\":\n            return 7;\n    }\n    throw new Error(`invalid Register: ${text}`);\n}\nfunction advancePR(PR, words) {\n    const v = PR.lookupLogical();\n    PR.storeLogical(v + words);\n}\nfunction setPR(PR, address) {\n    PR.store(address);\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/registerAccessor.js?");

/***/ }),

/***/ "./lib/assembler/casl2/procedures/strings.js":
/*!***************************************************!*\
  !*** ./lib/assembler/casl2/procedures/strings.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isDigits\": () => (/* binding */ isDigits),\n/* harmony export */   \"isNumeric\": () => (/* binding */ isNumeric),\n/* harmony export */   \"isHexadecimal\": () => (/* binding */ isHexadecimal),\n/* harmony export */   \"isJisX0201\": () => (/* binding */ isJisX0201),\n/* harmony export */   \"isAddress\": () => (/* binding */ isAddress),\n/* harmony export */   \"normalizeAddress\": () => (/* binding */ normalizeAddress)\n/* harmony export */ });\nfunction isDigits(s) {\n    return digits.test(s);\n}\nconst digits = /^[0-9]+$/;\nfunction isNumeric(s) {\n    return numFmt.test(s);\n}\nconst numFmt = /^-?[1-9]?[0-9]+$/;\nfunction isHexadecimal(s) {\n    return hexFmt.test(s);\n}\nconst hexFmt = /^#[0-9A-Fa-f]{4}$/;\nfunction isJisX0201(s) {\n    return jisX0201Fmt.test(s);\n}\nconst jisX0201Fmt = /^[\\s!\"#$%&'()*+,-./0-9:;<=>?@A-Z\\[¥\\]^_`a-z{|}~]+$/;\nfunction isAddress(s) {\n    if (isDigits(s)) {\n        return true;\n    }\n    return addressFmt.test(s);\n}\nconst addressFmt = /^#[0-9A-Fa-f]+$/;\nfunction normalizeAddress(s) {\n    if (s.startsWith(\"#\")) {\n        return parseInt(s.substring(1), 16);\n    }\n    else {\n        return parseInt(s, 10);\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/procedures/strings.js?");

/***/ }),

/***/ "./lib/assembler/casl2/tokenizer.js":
/*!******************************************!*\
  !*** ./lib/assembler/casl2/tokenizer.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"tokenize\": () => (/* binding */ tokenize)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./lib/assembler/types.js\");\n\nconst splitReg = /\\t+/;\nfunction tokenize(line, lineNum, instructionNum) {\n    let result = line.trimRight().split(splitReg);\n    if (result.length == 2) {\n        result = result.concat(\"\");\n    }\n    if (result.length != 3) {\n        return new Error(`invalid token num. L${lineNum + 1} line:\"${line}\"`);\n    }\n    return new _types__WEBPACK_IMPORTED_MODULE_0__.Tokens(lineNum, instructionNum, result[0], result[1], result[2]);\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/casl2/tokenizer.js?");

/***/ }),

/***/ "./lib/assembler/types.js":
/*!********************************!*\
  !*** ./lib/assembler/types.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tokens\": () => (/* binding */ Tokens)\n/* harmony export */ });\nclass Tokens {\n    constructor(lineNum, instructionNum, label, operator, operand) {\n        this.lineNum = lineNum;\n        this.instructionNum = instructionNum;\n        this.label = label;\n        this.operator = operator;\n        this.operand = operand;\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/assembler/types.js?");

/***/ }),

/***/ "./lib/infra/memory.js":
/*!*****************************!*\
  !*** ./lib/infra/memory.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Memory\": () => (/* binding */ Memory)\n/* harmony export */ });\n/* harmony import */ var _assembler_casl2_procedures_strings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assembler/casl2/procedures/strings */ \"./lib/assembler/casl2/procedures/strings.js\");\n\nclass Memory {\n    constructor() {\n        this.content = new DataView(new ArrayBuffer(WORD_LENGTH * 65536));\n    }\n    lookup(address) {\n        return this.content.getInt16(address * WORD_LENGTH);\n    }\n    lookupLogical(address) {\n        return this.content.getUint16(address * WORD_LENGTH);\n    }\n    store(address, value) {\n        if (address * WORD_LENGTH > this.content.byteLength) {\n            throw new Error(`invalid address. address=${address}`);\n        }\n        if (typeof value === 'string') {\n            if (!(0,_assembler_casl2_procedures_strings__WEBPACK_IMPORTED_MODULE_0__.isNumeric)(value)) {\n                throw new Error(`invalid value. value=${value}`);\n            }\n            value = Number(value);\n        }\n        if (value > INT16_MAX) {\n            throw new Error(`invalid value. value=${value}`);\n        }\n        this.content.setInt16(address * WORD_LENGTH, value);\n    }\n    storeLogical(address, value) {\n        if (address * WORD_LENGTH > this.content.byteLength) {\n            throw new Error(`invalid address. address=${address}`);\n        }\n        if (typeof value === 'string') {\n            if (!(0,_assembler_casl2_procedures_strings__WEBPACK_IMPORTED_MODULE_0__.isNumeric)(value)) {\n                throw new Error(`invalid value. value=${value}`);\n            }\n            value = Number(value);\n        }\n        if (value > UINT16_MAX) {\n            throw new Error(`invalid value. value=${value}`);\n        }\n        this.content.setInt16(address * WORD_LENGTH, value);\n    }\n    storeBytecode(bytecode, offset) {\n        const dataView = new DataView(bytecode);\n        if (dataView.byteLength < 2) {\n            throw new Error(`invalid bytecode. bytecode=${bytecode}`);\n        }\n        const wordLength = dataView.byteLength / 2;\n        for (let i = 0; i < wordLength; i++) {\n            this.storeLogical(offset + i, dataView.getUint16(2 * i, false));\n        }\n    }\n}\nconst WORD_LENGTH = 2; // byte\nconst INT16_MAX = 32767;\nconst UINT16_MAX = 65535;\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/infra/memory.js?");

/***/ }),

/***/ "./lib/infra/register.js":
/*!*******************************!*\
  !*** ./lib/infra/register.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isGeneralRegister\": () => (/* binding */ isGeneralRegister),\n/* harmony export */   \"GeneralRegister\": () => (/* binding */ GeneralRegister),\n/* harmony export */   \"FlagRegister\": () => (/* binding */ FlagRegister),\n/* harmony export */   \"END_ADDRESS\": () => (/* binding */ END_ADDRESS)\n/* harmony export */ });\nfunction isGeneralRegister(text) {\n    return [\"GR0\", \"GR1\", \"GR2\", \"GR3\", \"GR4\", \"GR5\", \"GR6\", \"GR7\"].indexOf(text) >= 0;\n}\nclass GeneralRegister {\n    constructor(name) {\n        this.content = new DataView(new ArrayBuffer(2));\n        this.name = name;\n    }\n    lookup() {\n        return this.content.getInt16(0);\n    }\n    lookupLogical() {\n        return this.content.getUint16(0);\n    }\n    store(value) {\n        this.content.setInt16(0, value);\n    }\n    storeLogical(value) {\n        this.content.setUint16(0, value);\n    }\n}\nclass FlagRegister {\n    constructor() {\n        this.overflowFlag = false;\n        this.signFlag = false;\n        this.zeroFlag = false;\n    }\n    of() {\n        return this.overflowFlag;\n    }\n    sf() {\n        return this.signFlag;\n    }\n    zf() {\n        return this.zeroFlag;\n    }\n    set(v) {\n        if (-32768 <= v && v <= 32767) {\n            this.overflowFlag = false;\n        }\n        else {\n            this.overflowFlag = true;\n        }\n        this.setSfZf(v);\n    }\n    setWithOverflowFlag(v, overflowFlag) {\n        this.overflowFlag = overflowFlag;\n        this.setSfZf(v);\n    }\n    setLogical(v) {\n        if (0 <= v && v <= 65535) {\n            this.overflowFlag = false;\n        }\n        else {\n            this.overflowFlag = true;\n        }\n        this.setSfZf(v);\n    }\n    setSfZf(v) {\n        if ((v & 0x8000) !== 0) {\n            // negative\n            this.signFlag = true;\n        }\n        else {\n            this.signFlag = false;\n        }\n        if ((v & 0xffff) !== 0) {\n            // not zero\n            this.zeroFlag = false;\n        }\n        else {\n            this.zeroFlag = true;\n        }\n    }\n    setByCPA(v) {\n        this.overflowFlag = false;\n        if (v < 0) {\n            // negative\n            this.signFlag = true;\n        }\n        else {\n            this.signFlag = false;\n        }\n        if (v == 0) {\n            this.zeroFlag = true;\n        }\n        else {\n            // not zero\n            this.zeroFlag = false;\n        }\n    }\n    setLogicalByCPL(v) {\n        this.overflowFlag = false;\n        if (v < 0) {\n            // negative\n            this.signFlag = true;\n        }\n        else {\n            this.signFlag = false;\n        }\n        if (v == 0) {\n            this.zeroFlag = true;\n        }\n        else {\n            // not zero\n            this.zeroFlag = false;\n        }\n    }\n    toString() {\n        const of = this.overflowFlag ? \"1\" : \"0\";\n        const sf = this.signFlag ? \"1\" : \"0\";\n        const zf = this.zeroFlag ? \"1\" : \"0\";\n        return of + sf + zf;\n    }\n}\nconst END_ADDRESS = 0xE000;\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/infra/register.js?");

/***/ }),

/***/ "./lib/interpreter/interpreter.js":
/*!****************************************!*\
  !*** ./lib/interpreter/interpreter.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Interpreter\": () => (/* binding */ Interpreter)\n/* harmony export */ });\n/* harmony import */ var _assembler_casl2_procedures_registerAccessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assembler/casl2/procedures/registerAccessor */ \"./lib/assembler/casl2/procedures/registerAccessor.js\");\n/* harmony import */ var _infra_register__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../infra/register */ \"./lib/infra/register.js\");\n\n\n// 1 word\nconst NOP = 0x00;\nconst LD = 0x14;\nconst ADDA = 0x24;\nconst SUBA = 0x25;\nconst ADDL = 0x26;\nconst SUBL = 0x27;\nconst AND = 0x34;\nconst OR = 0x35;\nconst XOR = 0x36;\nconst CPA = 0x44;\nconst CPL = 0x45;\nconst POP = 0x71;\nconst RET = 0x81;\n// 2 words\nconst LD2 = 0x10;\nconst ST = 0x11;\nconst LAD = 0x12;\nconst ADDA2 = 0x20;\nconst SUBA2 = 0x21;\nconst ADDL2 = 0x22;\nconst SUBL2 = 0x23;\nconst AND2 = 0x30;\nconst OR2 = 0x31;\nconst XOR2 = 0x32;\nconst CPA2 = 0x40;\nconst CPL2 = 0x41;\nconst SLA = 0x50;\nconst SRA = 0x51;\nconst SLL = 0x52;\nconst SRL = 0x53;\nconst JMI = 0x61;\nconst JNZ = 0x62;\nconst JZE = 0x63;\nconst JUMP = 0x64;\nconst JPL = 0x65;\nconst JOV = 0x66;\nconst PUSH = 0x70;\nconst CALL = 0x80;\n// no support\n// const SVC   = 0xF0\nclass Interpreter {\n    constructor(grMap, FR, PR, SP, memory) {\n        this.grMap = grMap;\n        this.FR = FR;\n        this.PR = PR;\n        this.SP = SP;\n        this.memory = memory;\n    }\n    divide(byte) {\n        return [\n            byte >> 4,\n            byte & 0b1111,\n        ];\n    }\n    gr(x) {\n        var _a;\n        return ((_a = this.grMap.get(`GR${x}`)) === null || _a === void 0 ? void 0 : _a.lookup()) || 0;\n    }\n    grLogical(x) {\n        var _a;\n        return ((_a = this.grMap.get(`GR${x}`)) === null || _a === void 0 ? void 0 : _a.lookupLogical()) || 0;\n    }\n    storeGr(x, value) {\n        var _a;\n        (_a = this.grMap.get(`GR${x}`)) === null || _a === void 0 ? void 0 : _a.store(value);\n    }\n    storeGrLogical(x, value) {\n        var _a;\n        (_a = this.grMap.get(`GR${x}`)) === null || _a === void 0 ? void 0 : _a.storeLogical(value);\n    }\n    readWord() {\n        const word = this.memory.lookupLogical(this.PR.lookupLogical());\n        const upperByte = word >> 8;\n        const lowerByte = word & 0b11111111;\n        return [upperByte, lowerByte];\n    }\n    run() {\n        let next = true;\n        while (next) {\n            next = this.step();\n        }\n    }\n    step() {\n        if (this.PR.lookupLogical() == _infra_register__WEBPACK_IMPORTED_MODULE_1__.END_ADDRESS) {\n            return false;\n        }\n        const [opcode, operands] = this.readWord();\n        (0,_assembler_casl2_procedures_registerAccessor__WEBPACK_IMPORTED_MODULE_0__.advancePR)(this.PR, 1);\n        switch (opcode) {\n            case NOP:\n                break;\n            case LD:\n                this.ld(operands);\n                break;\n            case ADDA:\n                this.adda(operands);\n                break;\n            case SUBA:\n                this.suba(operands);\n                break;\n            case ADDL:\n                this.addl(operands);\n                break;\n            case SUBL:\n                this.subl(operands);\n                break;\n            case AND:\n                this.and(operands);\n                break;\n            case OR:\n                this.or(operands);\n                break;\n            case XOR:\n                this.xor(operands);\n                break;\n            case CPA:\n                this.cpa(operands);\n                break;\n            case CPL:\n                this.cpl(operands);\n                break;\n            case POP:\n                this.pop(operands);\n                break;\n            case RET:\n                this.ret();\n                break;\n            default:\n                const [upper, lower] = this.readWord();\n                const address = (upper << 8) + lower;\n                (0,_assembler_casl2_procedures_registerAccessor__WEBPACK_IMPORTED_MODULE_0__.advancePR)(this.PR, 1);\n                switch (opcode) {\n                    case LD2:\n                        this.ld2(operands, address);\n                        break;\n                    case ST:\n                        this.st(operands, address);\n                        break;\n                    case LAD:\n                        this.lad(operands, address);\n                        break;\n                    case ADDA2:\n                        this.adda2(operands, address);\n                        break;\n                    case SUBA2:\n                        this.suba2(operands, address);\n                        break;\n                    case ADDL2:\n                        this.addl2(operands, address);\n                        break;\n                    case SUBL2:\n                        this.subl2(operands, address);\n                        break;\n                    case AND2:\n                        this.and2(operands, address);\n                        break;\n                    case OR2:\n                        this.or2(operands, address);\n                        break;\n                    case XOR2:\n                        this.xor2(operands, address);\n                        break;\n                    case CPA2:\n                        this.cpa2(operands, address);\n                        break;\n                    case CPL2:\n                        this.cpl2(operands, address);\n                        break;\n                    case SLA:\n                        this.sla(operands, address);\n                        break;\n                    case SRA:\n                        this.sra(operands, address);\n                        break;\n                    case SLL:\n                        this.sll(operands, address);\n                        break;\n                    case SRL:\n                        this.srl(operands, address);\n                        break;\n                    case JMI:\n                        this.jmi(operands, address);\n                        break;\n                    case JNZ:\n                        this.jnz(operands, address);\n                        break;\n                    case JZE:\n                        this.jze(operands, address);\n                        break;\n                    case JUMP:\n                        this.jump(operands, address);\n                        break;\n                    case JPL:\n                        this.jpl(operands, address);\n                        break;\n                    case JOV:\n                        this.jov(operands, address);\n                        break;\n                    case PUSH:\n                        this.push(operands, address);\n                        break;\n                    case CALL:\n                        this.call(operands, address);\n                        break;\n                    default:\n                        throw new Error(`unknown opcode. opcode=${opcode}, operands=${operands}`);\n                }\n        }\n        const next = this.PR.lookupLogical();\n        if (next == _infra_register__WEBPACK_IMPORTED_MODULE_1__.END_ADDRESS) {\n            return false;\n        }\n        return true;\n    }\n    xaddr(x) {\n        if (1 <= x && x <= 7) {\n            return this.grLogical(x);\n        }\n        return 0;\n    }\n    ld(operands) {\n        const [n, m] = this.divide(operands);\n        const v = this.gr(m);\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    ld2(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = this.memory.lookup(address + this.xaddr(x));\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    adda(operands) {\n        const [n, m] = this.divide(operands);\n        const v = this.gr(n) + this.gr(m);\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    adda2(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = this.gr(n) + this.memory.lookup(address + this.xaddr(x));\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    suba(operands) {\n        const [n, m] = this.divide(operands);\n        const v = this.gr(n) - this.gr(m);\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    suba2(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = this.gr(n) - this.memory.lookup(address + this.xaddr(x));\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    addl(operands) {\n        const [n, m] = this.divide(operands);\n        const v = this.grLogical(n) + this.grLogical(m);\n        this.storeGrLogical(n, v);\n        this.FR.setLogical(v);\n    }\n    addl2(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = this.grLogical(n) + this.memory.lookupLogical(address + this.xaddr(x));\n        this.storeGrLogical(n, v);\n        this.FR.setLogical(v);\n    }\n    subl(operands) {\n        const [n, m] = this.divide(operands);\n        const v = this.grLogical(n) - this.grLogical(m);\n        this.storeGrLogical(n, v);\n        this.FR.setLogical(v);\n    }\n    subl2(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = this.grLogical(n) - this.memory.lookupLogical(address + this.xaddr(x));\n        this.storeGrLogical(n, v);\n        this.FR.setLogical(v);\n    }\n    and(operands) {\n        const [n, m] = this.divide(operands);\n        const v = this.gr(n) & this.gr(m);\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    and2(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = this.gr(n) & this.memory.lookup(address + this.xaddr(x));\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    or(operands) {\n        const [n, m] = this.divide(operands);\n        const v = this.gr(n) | this.gr(m);\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    or2(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = this.gr(n) | this.memory.lookup(address + this.xaddr(x));\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    xor(operands) {\n        const [n, m] = this.divide(operands);\n        const v = this.gr(n) ^ this.gr(m);\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    xor2(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = this.gr(n) ^ this.memory.lookup(address + this.xaddr(x));\n        this.storeGr(n, v);\n        this.FR.set(v);\n    }\n    cpa(operands) {\n        const [n, m] = this.divide(operands);\n        const v = this.gr(n) - this.gr(m);\n        this.FR.setByCPA(v);\n    }\n    cpa2(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = this.gr(n) - this.memory.lookup(address + this.xaddr(x));\n        this.FR.setByCPA(v);\n    }\n    cpl(operands) {\n        const [n, m] = this.divide(operands);\n        const v = this.grLogical(n) - this.grLogical(m);\n        this.FR.setLogicalByCPL(v);\n    }\n    cpl2(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = this.grLogical(n) - this.memory.lookupLogical(address + this.xaddr(x));\n        this.FR.setLogicalByCPL(v);\n    }\n    pop(operands) {\n        const [n, _] = this.divide(operands);\n        const address = this.memory.lookupLogical(this.SP.lookupLogical());\n        this.storeGrLogical(n, address);\n        this.SP.storeLogical(this.SP.lookupLogical() + 1);\n    }\n    push(operands, address) {\n        // address -> memory(SP-1)\n        const [_, x] = this.divide(operands);\n        this.SP.storeLogical(this.SP.lookupLogical() - 1);\n        this.memory.storeLogical(this.SP.lookupLogical(), address + this.xaddr(x));\n    }\n    ret() {\n        const sp = this.SP.lookupLogical();\n        if (sp != _infra_register__WEBPACK_IMPORTED_MODULE_1__.END_ADDRESS) {\n            const address = this.memory.lookupLogical(sp);\n            this.PR.storeLogical(address);\n            this.SP.storeLogical(sp + 1);\n        }\n        else {\n            this.PR.store(_infra_register__WEBPACK_IMPORTED_MODULE_1__.END_ADDRESS);\n        }\n    }\n    call(operands, address) {\n        // PR -> memory(SP-1)\n        // address -> PR\n        const [_, x] = this.divide(operands);\n        const wordLength = 2;\n        this.SP.storeLogical(this.SP.lookupLogical() - 1);\n        this.memory.storeLogical(this.SP.lookupLogical(), this.PR.lookupLogical());\n        this.PR.storeLogical(address + this.xaddr(x));\n    }\n    st(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = this.gr(n);\n        this.memory.store(address + this.xaddr(x), v);\n    }\n    lad(operands, address) {\n        const [n, x] = this.divide(operands);\n        const v = address + this.xaddr(x);\n        this.storeGr(n, v);\n    }\n    sla(operands, address) {\n        const [n, x] = this.divide(operands);\n        const isNegative = ((this.gr(n) >> 15) & 1) != 0;\n        const b = address + this.xaddr(x);\n        let v = this.gr(n) << b;\n        if (isNegative) {\n            v = v | (1 << 15);\n        }\n        else {\n            v = v & ~(1 << 15);\n        }\n        let overflowFlag = false;\n        if (((this.grLogical(n) >> (16 - 1 - b)) & 1) !== 0) {\n            overflowFlag = true;\n        }\n        this.storeGr(n, v);\n        this.FR.setWithOverflowFlag(v, overflowFlag);\n    }\n    sra(operands, address) {\n        const [n, x] = this.divide(operands);\n        const b = address + this.xaddr(x);\n        let v = this.gr(n) >> b;\n        let overflowFlag = false;\n        if (((this.grLogical(n) >> (b - 1)) & 1) !== 0) {\n            overflowFlag = true;\n        }\n        this.storeGr(n, v);\n        this.FR.setWithOverflowFlag(v, overflowFlag);\n    }\n    sll(operands, address) {\n        const [n, x] = this.divide(operands);\n        const b = address + this.xaddr(x);\n        let v = this.gr(n) << b;\n        let overflowFlag = false;\n        if (((this.grLogical(n) >> (16 - b)) & 1) !== 0) {\n            overflowFlag = true;\n        }\n        this.storeGr(n, v);\n        this.FR.setWithOverflowFlag(v, overflowFlag);\n    }\n    srl(operands, address) {\n        const [n, x] = this.divide(operands);\n        const b = address + this.xaddr(x);\n        let v = this.grLogical(n) >>> b;\n        let overflowFlag = false;\n        if (((this.grLogical(n) >> (b - 1)) & 1) !== 0) {\n            overflowFlag = true;\n        }\n        this.storeGr(n, v);\n        this.FR.setWithOverflowFlag(v, overflowFlag);\n    }\n    jmi(operands, address) {\n        const [_, x] = this.divide(operands);\n        if (this.FR.sf()) {\n            (0,_assembler_casl2_procedures_registerAccessor__WEBPACK_IMPORTED_MODULE_0__.setPR)(this.PR, address + this.xaddr(x));\n        }\n    }\n    jnz(operands, address) {\n        const [_, x] = this.divide(operands);\n        if (!this.FR.zf()) {\n            (0,_assembler_casl2_procedures_registerAccessor__WEBPACK_IMPORTED_MODULE_0__.setPR)(this.PR, address + this.xaddr(x));\n        }\n    }\n    jze(operands, address) {\n        const [_, x] = this.divide(operands);\n        if (this.FR.zf()) {\n            (0,_assembler_casl2_procedures_registerAccessor__WEBPACK_IMPORTED_MODULE_0__.setPR)(this.PR, address + this.xaddr(x));\n        }\n    }\n    jump(operands, address) {\n        const [_, x] = this.divide(operands);\n        (0,_assembler_casl2_procedures_registerAccessor__WEBPACK_IMPORTED_MODULE_0__.setPR)(this.PR, address + this.xaddr(x));\n    }\n    jpl(operands, address) {\n        const [_, x] = this.divide(operands);\n        if (!this.FR.sf()) {\n            (0,_assembler_casl2_procedures_registerAccessor__WEBPACK_IMPORTED_MODULE_0__.setPR)(this.PR, address + this.xaddr(x));\n        }\n    }\n    jov(operands, address) {\n        const [_, x] = this.divide(operands);\n        if (this.FR.of()) {\n            (0,_assembler_casl2_procedures_registerAccessor__WEBPACK_IMPORTED_MODULE_0__.setPR)(this.PR, address + this.xaddr(x));\n        }\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/interpreter/interpreter.js?");

/***/ }),

/***/ "./lib/machine.js":
/*!************************!*\
  !*** ./lib/machine.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeMachine\": () => (/* binding */ makeMachine),\n/* harmony export */   \"Commet2\": () => (/* binding */ Commet2)\n/* harmony export */ });\n/* harmony import */ var _infra_memory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./infra/memory */ \"./lib/infra/memory.js\");\n/* harmony import */ var _infra_register__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./infra/register */ \"./lib/infra/register.js\");\n/* harmony import */ var _assembler_assembler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assembler/assembler */ \"./lib/assembler/assembler.js\");\n/* harmony import */ var _interpreter_interpreter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interpreter/interpreter */ \"./lib/interpreter/interpreter.js\");\n\n\n\n\nfunction makeMachine(input, startMemAddress) {\n    return new Commet2(input, startMemAddress);\n}\nclass Commet2 {\n    constructor(input, startMemAddress) {\n        this.FR = new _infra_register__WEBPACK_IMPORTED_MODULE_1__.FlagRegister();\n        this.grMap = new Map();\n        this.PR = new _infra_register__WEBPACK_IMPORTED_MODULE_1__.GeneralRegister(\"PR\");\n        this.memory = new _infra_memory__WEBPACK_IMPORTED_MODULE_0__.Memory();\n        this.SP = new _infra_register__WEBPACK_IMPORTED_MODULE_1__.GeneralRegister(\"SP\");\n        this.labels = new Map();\n        this.assembleResult = [];\n        for (let i = 0; i <= 7; i++) {\n            const name = `GR${i}`;\n            this.grMap.set(name, new _infra_register__WEBPACK_IMPORTED_MODULE_1__.GeneralRegister(name));\n        }\n        this.PR.store(startMemAddress);\n        this.assembleResult = (0,_assembler_assembler__WEBPACK_IMPORTED_MODULE_2__.assemble)(startMemAddress, input, this.labels, this.memory);\n        this.interpreter = new _interpreter_interpreter__WEBPACK_IMPORTED_MODULE_3__.Interpreter(this.grMap, this.FR, this.PR, this.SP, this.memory);\n        this.SP.storeLogical(0x9000);\n        this.memory.storeLogical(0x9000, _infra_register__WEBPACK_IMPORTED_MODULE_1__.END_ADDRESS);\n    }\n    step() {\n        return this.interpreter.step();\n    }\n    stepAll() {\n        while (this.interpreter.step()) { }\n        return true;\n    }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/machine.js?");

/***/ }),

/***/ "./lib/wasm_machine.js":
/*!*****************************!*\
  !*** ./lib/wasm_machine.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"makeWasmMachine\": () => (/* binding */ makeWasmMachine)\n/* harmony export */ });\n/* harmony import */ var _infra_memory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./infra/memory */ \"./lib/infra/memory.js\");\n/* harmony import */ var _infra_register__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./infra/register */ \"./lib/infra/register.js\");\n/* harmony import */ var _assembler_assembler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assembler/assembler */ \"./lib/assembler/assembler.js\");\n\n\n\n\nfunction makeWasmMachine(input, startMemAddress) {\n  const machine = new WasmMachine(input, startMemAddress);\n  return machine;\n}\n\nclass WasmMachine {\n  constructor(input, startMemAddress) {\n    this.FR = new _infra_register__WEBPACK_IMPORTED_MODULE_1__.FlagRegister();\n    this.grMap = new Map();\n    for (let i = 0; i <= 7; i++) {\n        const name = `GR${i}`;\n        this.grMap.set(name, new _infra_register__WEBPACK_IMPORTED_MODULE_1__.GeneralRegister(name));\n    }\n    this.PR = new _infra_register__WEBPACK_IMPORTED_MODULE_1__.GeneralRegister(\"PR\");\n    this.SP = new _infra_register__WEBPACK_IMPORTED_MODULE_1__.GeneralRegister(\"SP\");\n    this.SP.storeLogical(0x9000);\n    this.PR.store(startMemAddress);\n    this.labels = new Map();\n\n    const tmpMemory = new _infra_memory__WEBPACK_IMPORTED_MODULE_0__.Memory();\n    this.assembleResult = (0,_assembler_assembler__WEBPACK_IMPORTED_MODULE_2__.assemble)(startMemAddress, input, this.labels, tmpMemory)\n    console.log(\"entry_point :: assemble SUCCESS\")\n\n    this.bufferForDebug = tmpMemory.content.buffer;\n\n    // assembleの結果のバイト列をwasmのメモリにコピー\n    const arr = new Uint8Array(tmpMemory.content.buffer);\n    this.pointer = Module._malloc(Uint8Array.BYTES_PER_ELEMENT * arr.length);\n    if (this.pointer == null) {\n      throw new Error(\"entry_point :: malloc failed\");\n    }\n    Module.HEAP8.set(arr, this.pointer / Uint8Array.BYTES_PER_ELEMENT);\n\n    // wasmの関数を呼び出して初期化\n    const setupResult = Module.ccall('makeMachine',\n      'number',\n      ['number', 'number', 'number'],\n      [this.pointer, tmpMemory.content.byteLength, startMemAddress]\n    );\n    console.log(\"entry_point :: setupResult=\", setupResult);\n\n    // wasmのメモリの参照を取得してフィールドに保存\n    const memoryUint8Array = Module.getMemory();\n    this.memory = new _infra_memory__WEBPACK_IMPORTED_MODULE_0__.Memory();\n    this.memory.content = new DataView(memoryUint8Array.buffer, memoryUint8Array.byteOffset, memoryUint8Array.byteLength);\n  }\n\n  step() {\n    const result = Module.step();\n    this.PR.store(result.pr);\n    this.SP.store(result.sp);\n    this.grMap.get('GR0').store(result.gr0);\n    this.grMap.get('GR1').store(result.gr1);\n    this.grMap.get('GR2').store(result.gr2);\n    this.grMap.get('GR3').store(result.gr3);\n    this.grMap.get('GR4').store(result.gr4);\n    this.grMap.get('GR5').store(result.gr5);\n    this.grMap.get('GR6').store(result.gr6);\n    this.grMap.get('GR7').store(result.gr7);\n    this.FR.overflowFlag = result.overflowFlag;\n    this.FR.signFlag = result.signFlag;\n    this.FR.zeroFlag = result.zeroFlag;\n\n    console.log(\"----- wasmMachine step output START -----\")\n    console.log(\"PR: \" + this.PR.lookup())\n    console.log(\"GR0: \" + this.grMap.get('GR0').lookup())\n    console.log(\"GR1: \" + this.grMap.get('GR1').lookup())\n    console.log(\"GR2: \" + this.grMap.get('GR2').lookup())\n    console.log(\"GR3: \" + this.grMap.get('GR3').lookup())\n    console.log(\"GR4: \" + this.grMap.get('GR4').lookup())\n    console.log(\"GR5: \" + this.grMap.get('GR5').lookup())\n    console.log(\"GR6: \" + this.grMap.get('GR6').lookup())\n    console.log(\"GR7: \" + this.grMap.get('GR7').lookup())\n    console.log(\"memory.lookupLogical():\" + this.memory.lookupLogical(0).toString(16))\n    console.log(\"memory.lookupLogical():\" + this.memory.lookupLogical(1).toString(16))\n    console.log(\"memory.lookupLogical():\" + this.memory.lookupLogical(2).toString(16))\n    console.log(\"memory.lookupLogical():\" + this.memory.lookupLogical(3).toString(16))\n    console.log(\"memory.lookupLogical():\" + this.memory.lookupLogical(2000).toString(16))\n    console.log(\"memory.lookupLogical():\" + this.memory.lookupLogical(2001).toString(16))\n    console.log(\"memory.lookupLogical():\" + this.memory.lookupLogical(2002).toString(16))\n    console.log(\"memory.lookupLogical():\" + this.memory.lookupLogical(2003).toString(16))\n    console.log(\"----- wasmMachine step output END -----\")\n  }\n\n  stepAll() {\n    const result = Module.stepAll();\n    this.PR.store(result.pr);\n    this.SP.store(result.sp);\n    this.grMap.get('GR0').store(result.gr0);\n    this.grMap.get('GR1').store(result.gr1);\n    this.grMap.get('GR2').store(result.gr2);\n    this.grMap.get('GR3').store(result.gr3);\n    this.grMap.get('GR4').store(result.gr4);\n    this.grMap.get('GR5').store(result.gr5);\n    this.grMap.get('GR6').store(result.gr6);\n    this.grMap.get('GR7').store(result.gr7);\n    this.FR.overflowFlag = result.overflowFlag;\n    this.FR.signFlag = result.signFlag;\n    this.FR.zeroFlag = result.zeroFlag;\n  }\n}\n\n\n//# sourceURL=webpack://cals2-Playground/./lib/wasm_machine.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_machine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/machine */ \"./lib/machine.js\");\n/* harmony import */ var _lib_wasm_machine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/wasm_machine */ \"./lib/wasm_machine.js\");\n\n\n\nwindow.casl2 = {\n  version: \"0.3.0\",\n  showWasmResult: false\n}\n\nfunction addClassName(elm, className) {\n  const classNames = elm.className.split(\" \")\n  if (classNames.indexOf(className) == -1) {\n    classNames.push(className)\n  }\n  elm.className = classNames.join(\" \")\n  return elm\n}\n\nfunction H2(text) {\n  const header = document.createElement(\"h2\")\n  header.innerText = text\n  return header\n}\n\nfunction TH(text) {\n  const element = document.createElement(\"th\")\n  element.innerText = text\n  return element\n}\n\nfunction TD(text) {\n  const element = document.createElement(\"td\")\n  element.innerText = text\n  return element\n}\n\nfunction TR(...elms) {\n  const row = document.createElement(\"tr\")\n  for (let elm of elms) {\n    row.appendChild(elm)\n  }\n  return row\n}\n\nfunction INPUT_ADDRESS(labelText, id) {\n  const label = document.createElement(\"label\")\n  label.innerText = labelText + \"#\"\n  label.htmlFor = id\n  let input = document.createElement(\"input\")\n  input = addClassName(input, \"code\")\n  input.id = id\n  input.type = \"text\"\n  input.min = 0\n  input.max = 9000\n  input.step = 8\n  return [label, input]\n}\n\nfunction displayOpecode(bytecode) {\n  let v = \"\"\n  if (bytecode != null) {\n    const view = new DataView(bytecode)\n    if (bytecode.byteLength >= 2) {\n      v = view.getUint8(0).toString(16).padStart(2, \"0\")\n      v = \"#\" + v + view.getUint8(1).toString(16).padStart(2, \"0\")\n    }\n    if (bytecode.byteLength >= 4) {\n      v = v + \" \"\n      v = v + \"#\" + view.getUint16(2).toString(16).padStart(4, \"0\")\n    }\n  }\n  return v.toUpperCase()\n}\n\nconst COLOR = {\n  main: \"#d9de2f\",\n  sub: \"#a7865a\",\n  accent: \"#f5d942\",\n  danger: \"#dc932a\",\n  white: \"#ffffff\",\n}\n\nfunction toHexString(x) {\n  return \"#\" + x.toString(16).padStart(4, \"0\").toUpperCase()\n}\n\nfunction toBinaryString(x) {\n  const s = x.toString(2).padStart(16, \"0\").toUpperCase()\n  return s.slice(0, 4) + \" \" + s.slice(4, 8) + \" \" + s.slice(8, 12) + \" \" + s.slice(12, 16)\n}\n\nfunction component() {\n  const globalConf = {\n    startAddress: 0x8000,\n    displayAddress: 0x8000,\n  }\n\n  const assembled = {\n    machine: null,\n    wasmMachine: null,\n    inputText: \"\",\n  }\n\n  function assemble(inputText) {\n    console.log(\"=== ASSEMBLE START ===\")\n    console.log(\"startAddress: \", globalConf.startAddress)\n    assembled.inputText = inputText\n    const input = inputText.replaceAll(\"  \", \"\\t\")\n    console.log(\"-----\")\n    console.log(input)\n    console.log(\"-----\")\n    assembled.machine = (0,_lib_machine__WEBPACK_IMPORTED_MODULE_0__.makeMachine)(input, globalConf.startAddress)\n    console.log(\"makeMachine done.\")\n    console.log(assembled.machine)\n    assembled.wasmMachine = (0,_lib_wasm_machine__WEBPACK_IMPORTED_MODULE_1__.makeWasmMachine)(input, globalConf.startAddress)\n    console.log(\"makeWasmMachine done. result=\" + assembled.wasmMachine)\n    console.log(assembled.wasmMachine)\n    console.log(\"=== ASSEMBLE END ===\")\n  }\n\n  function step() {\n    const hasNext = assembled.machine.step()\n    console.log(\"-----\")\n    console.log(\"ok currentPos=\" + assembled.machine.PR.lookupLogical())\n    console.log(\"-----\")\n    const res = assembled.wasmMachine.step()\n    return hasNext\n  }\n\n  const sample = `SAMPLE\tSTART\n\tLD\tGR1,A\n\tLD\tGR2,B\n\tADDA\tGR1,GR2\n\tST\tGR1,C\n\tRET\nA\tDC\t3\nB\tDC\t5\nC\tDS\t1\n\tEND`\n\n  const renderInputArea = (container, assembleResultArea, machineStateArea) => {\n    container.appendChild(H2(\"Input source code\"))\n\n    let sourceCodeEditor = document.createElement(\"textarea\")\n    sourceCodeEditor = addClassName(sourceCodeEditor, \"code\")\n    sourceCodeEditor.cols = 80\n    sourceCodeEditor.rows = 20\n    sourceCodeEditor.onkeydown = (event) => {\n      if (event.keyCode == 9 || event.key == \"Tab\" || event.keyCode == 32 || event.key == \"\") {\n        event.preventDefault()\n        const pos = sourceCodeEditor.selectionStart\n        const left = sourceCodeEditor.value.substr(0, pos)\n        const right = sourceCodeEditor.value.substr(pos, sourceCodeEditor.value.length)\n        sourceCodeEditor.value = left + \"\\t\" + right\n        sourceCodeEditor.selectionEnd = pos+1\n      }\n    }\n    sourceCodeEditor.innerHTML = sample\n    sourceCodeEditor.autofocus = true\n    sourceCodeEditor.selectionStart = sourceCodeEditor.value.length\n    sourceCodeEditor.selectionEnd = sourceCodeEditor.selectionStart\n    container.appendChild(sourceCodeEditor)\n\n    const globalConfBox = document.createElement(\"div\")\n    const [startAddressLabel, startAddressInput] = INPUT_ADDRESS(\"Start address : \", \"input_text_start_address\")\n    startAddressInput.value = globalConf.startAddress.toString(16)\n    startAddressInput.oninput = () => {\n      globalConf.startAddress = parseInt(\"0x\" + startAddressInput.value, 16)\n    }\n    globalConfBox.appendChild(startAddressLabel)\n    globalConfBox.appendChild(startAddressInput)\n    container.appendChild(globalConfBox)\n\n    const assembleErrorMessage = document.createElement(\"p\")\n    assembleErrorMessage.style.fontSize = \"1.2rem\"\n    assembleErrorMessage.style.fontWeight = \"bold\"\n    assembleErrorMessage.style.color = COLOR.danger\n    container.appendChild(assembleErrorMessage)\n\n    const assembleButton = document.createElement(\"button\")\n    assembleButton.textContent = \"Assemble\"\n    assembleButton.onclick = () => {\n      try {\n        assembleErrorMessage.innerText = \"\"\n        assemble(sourceCodeEditor.value.toUpperCase())\n      } catch(e) {\n        let errorMessage = e.message\n        if (e.tokens) {\n          errorMessage = \"L\" + (e.tokens.lineNum + 1) + \": \" + e.message\n        }\n        assembleErrorMessage.innerText = errorMessage\n        alert(errorMessage)\n        throw e\n      }\n      renderAssembleResultArea(assembleResultArea, machineStateArea)\n      renderMachineStates(machineStateArea)\n    }\n    container.appendChild(assembleButton)\n  }\n\n  const renderAssembleResultArea = (container, machineStateArea) => {\n    container.innerHTML = \"\"\n\n    const assembleResultHeader = H2(\"Assemble result\")\n    assembleResultHeader.ondblclick = () => {\n      casl2.showWasmResult = !casl2.showWasmResult\n      renderMachineStates(machineStateArea)\n    };\n    container.appendChild(assembleResultHeader)\n\n    let assembleResult = document.createElement(\"table\")\n    assembleResult = addClassName(assembleResult, \"code\")\n    assembleResult.id = \"assemble_result\"\n    assembleResult.appendChild(TR(\n      TH(\"\"),\n      TH(\"opecode\"),\n      TH(\"address\"),\n      TH(\"\"),\n      TH(\"\"),\n      TH(\"\"),\n    ))\n    for (let line of assembled.machine.assembleResult) {\n      const operator = line.tokens.operator\n      assembleResult.appendChild(TR(\n        TD(line.tokens.lineNum),\n        TD(displayOpecode(line.bytecode)),\n        TD(operator.startsWith(\"START\") || operator.startsWith(\"END\") ? \"\" : toHexString(line.memAddress)),\n        TD(line.tokens.label),\n        TD(line.tokens.operator),\n        TD(line.tokens.operand),\n      ))\n    }\n    container.appendChild(assembleResult)\n\n    function coloring() {\n      const rows = document.querySelectorAll(\"#assemble_result tr\")\n      rows.forEach((row, i) => {\n        if (i == 0) return\n        const address = row.querySelectorAll(\"td\").item(2).innerText\n        if (toHexString(assembled.machine.PR.lookupLogical()) == address) {\n          row.style.backgroundColor = COLOR.accent\n        } else {\n          row.style.backgroundColor = null\n        }\n      })\n    }\n\n    const resetButton = document.createElement(\"button\")\n    resetButton.textContent = \"Reset\"\n    resetButton.onclick = () => {\n      assemble(assembled.inputText)\n      renderAssembleResultArea(container, machineStateArea)\n      renderMachineStates(machineStateArea)\n    }\n\n    const stepOverButton = document.createElement(\"button\")\n    stepOverButton.textContent = \"Step over\"\n    stepOverButton.onclick = () => {\n      const hasNext = step()\n      if (hasNext) {\n        coloring()\n        renderMachineStates(machineStateArea)\n      } else {\n        stepOverButton.disabled = true\n        runButton.disabled = true\n      }\n    }\n\n    const runButton = document.createElement(\"button\")\n    runButton.textContent = \"Run\"\n    runButton.onclick = () => {\n      console.time(\"stepAll_js\")\n      assembled.machine.stepAll()\n      console.timeEnd(\"stepAll_js\")\n      console.time(\"stepAll_wasm\")\n      assembled.wasmMachine.stepAll()\n      console.timeEnd(\"stepAll_wasm\")\n      // let hasNext = true\n      // const intervalId = setInterval(() => {\n      //   hasNext = step()\n      //   if (hasNext) {\n      //     coloring()\n      //     renderMachineStates(machineStateArea)\n      //   } else {\n      //     clearInterval(intervalId)\n      //   }\n      // }, 500)\n      coloring()\n      renderMachineStates(machineStateArea)\n      stepOverButton.disabled = true\n      runButton.disabled = true\n    }\n\n    container.appendChild(stepOverButton)\n    container.appendChild(runButton)\n    container.appendChild(resetButton)\n\n    coloring()\n  }\n\n  const renderMachineStates = (container) => {\n    container.innerHTML = \"\"\n    _renderMachineState(container, \"js\", assembled.machine)\n    if (casl2.showWasmResult) {\n      _renderMachineState(container, \"wasm\", assembled.wasmMachine)\n    }\n  }\n\n  const _renderMachineState = (container, idPrefix, machine) => {\n    console.log(machine)\n    if (casl2.showWasmResult) {\n      container.appendChild(H2(`Machine states ( ${idPrefix} )`))\n    } else {\n      container.appendChild(H2(`Machine states`))\n    }\n    const statesBox = document.createElement(\"div\")\n    statesBox.id = `${idPrefix}_machine_states`\n    statesBox.style.display = \"flex\"\n    statesBox.style.justifyContent = \"space-between\"\n\n    const leftBox = document.createElement(\"div\")\n\n    let prTable = document.createElement(\"table\")\n    prTable = addClassName(prTable, \"code\")\n    prTable.appendChild(TR(\n      TH(\"PR\"),\n      TD(toHexString(machine.PR.lookupLogical())),\n    ))\n    let grTable = document.createElement(\"table\")\n    leftBox.appendChild(prTable)\n\n    grTable = addClassName(grTable, \"code\")\n    for (let gr of [\"GR0\", \"GR1\", \"GR2\", \"GR3\", \"GR4\", \"GR5\", \"GR6\", \"GR7\"]) {\n      const register = machine.grMap.get(gr)\n      grTable.appendChild(TR(\n        TH(gr),\n        TD(toHexString(register.lookupLogical())),\n        addClassName(TD(toBinaryString(register.lookupLogical())), \"dashed-border\"),\n        TD(register.lookup()),\n      ))\n    }\n    leftBox.appendChild(grTable)\n\n    let frTable = document.createElement(\"table\")\n    frTable = addClassName(frTable, \"code\")\n    frTable.appendChild(TR(\n      TH(\"FR\"),\n      TD(machine.FR.of() ? \"OF: 1\" : \"OF: 0\"),\n      TD(machine.FR.sf() ? \"SF: 1\" : \"SF: 0\"),\n      TD(machine.FR.zf() ? \"ZF: 1\" : \"ZF: 0\"),\n    ))\n    leftBox.appendChild(frTable)\n\n    let spTable = document.createElement(\"table\")\n    spTable = addClassName(spTable, \"code\")\n    spTable.appendChild(TR(\n      TH(\"SP\"),\n      TD(toHexString(machine.SP.lookupLogical())),\n    ))\n    leftBox.appendChild(spTable)\n    statesBox.appendChild(leftBox)\n\n    const memoryBox = document.createElement(\"div\")\n    const [displayAddressLabel, displayAddressInput] = INPUT_ADDRESS(\"Display from : \", \"display_address\")\n    displayAddressInput.value = globalConf.displayAddress.toString(16)\n    displayAddressInput.onchange = () => {\n      globalConf.displayAddress = parseInt(\"0x\" + displayAddressInput.value, 16)\n      console.log(globalConf.displayAddress)\n      renderMemoryTable(globalConf.displayAddress)\n    }\n    memoryBox.appendChild(displayAddressLabel)\n    memoryBox.appendChild(displayAddressInput)\n    function renderMemoryTable(displayAddress) {\n      const id = `${idPrefix}_memory_table`\n      const target = document.getElementById(id)\n      if (target) {\n        memoryBox.removeChild(target)\n      }\n      let memoryTable = document.createElement(\"table\")\n      memoryTable = addClassName(memoryTable, \"code\")\n      memoryTable.id = id\n      memoryTable.appendChild(TR(\n        TH(\"address\"),\n        TH(\"\"),\n        TH(\"\"),\n        TH(\"\"),\n        TH(\"\"),\n        TH(\"\"),\n        TH(\"\"),\n        TH(\"\"),\n        TH(\"\"),\n      ))\n      let i = displayAddress;\n      const end = i + 8*16\n      while (i < end) {\n        memoryTable.appendChild(TR(\n          TH(\"#\" + i.toString(16)),\n          TD(toHexString(machine.memory.lookupLogical(i++))),\n          TD(toHexString(machine.memory.lookupLogical(i++))),\n          TD(toHexString(machine.memory.lookupLogical(i++))),\n          TD(toHexString(machine.memory.lookupLogical(i++))),\n          TD(toHexString(machine.memory.lookupLogical(i++))),\n          TD(toHexString(machine.memory.lookupLogical(i++))),\n          TD(toHexString(machine.memory.lookupLogical(i++))),\n          TD(toHexString(machine.memory.lookupLogical(i++))),\n        ))\n      }\n      memoryBox.appendChild(memoryTable)\n    }\n    renderMemoryTable(globalConf.displayAddress)\n    statesBox.appendChild(memoryBox)\n    container.appendChild(statesBox)\n  }\n\n  return {\n    render: () => {\n      const container = document.createElement(\"div\")\n\n      const inputArea = document.createElement(\"div\")\n      const assembleResultArea = document.createElement(\"div\")\n      const machineStateArea = document.createElement(\"div\")\n\n      renderInputArea(inputArea, assembleResultArea, machineStateArea)\n\n      container.appendChild(inputArea)\n      container.appendChild(assembleResultArea)\n      container.appendChild(machineStateArea)\n      return container\n    }\n  }\n}\n\ndocument.getElementById(\"app\").appendChild(component().render())\n\n\n//# sourceURL=webpack://cals2-Playground/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;